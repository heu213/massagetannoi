stages:
  - release
  - build

semantic_release:
  image: node:14
  stage: release
  rules: 
    - if: $OPERATION != "build-release" && $CI_COMMIT_REF_NAME == "master"
  script:
    - npm i
    - npx semantic-release

build_staging:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  rules: 
    - if: $OPERATION == "deploy-staging"
  script:
    - ENCODED_REF=$(echo $CI_COMMIT_REF_NAME|sed -e 's/\//\_/g')
    - docker login -u $CI_REGISTRY_USER -p $GL_CI_TOKEN $CI_REGISTRY
    - docker build -f distribution/Dockerfile -t $CI_REGISTRY/worldtech-ltd/worldcare-backend:$ENCODED_REF .
    - docker push $CI_REGISTRY/worldtech-ltd/worldcare-backend:$ENCODED_REF
    - 'curl --silent -X POST --header "Content-Type: application/json" --header "Accept: application/json" --header "authorization: ${SWARM_KEY}" "$SWARM_URL?tag=$ENCODED_REF"'
  after_script:
    # - apk add --update curl && rm -rf /var/cache/apk/*
    - PR_URL="https://gitlab.com/api/v4/projects/25638288/merge_requests/${MR_ID}/notes"
    - |
      if [ "$CI_JOB_STATUS" == "success" ]; then
        curl --silent --location --request POST "${PR_URL}" --header "PRIVATE-TOKEN: ${GL_CI_TOKEN}" --header "Content-Type: application/json" --data-raw "{ \"body\": \"Build success.\" }"
      else
        curl  --silent --location --request POST "${PR_URL}" --header "PRIVATE-TOKEN: ${GL_CI_TOKEN}" --header "Content-Type: application/json" --data-raw "{ \"body\": \"Build failed.\" }"
      fi
    
build_release:
  image: docker:20.10.16
  stage: build
  services:
    - docker:20.10.16-dind
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  rules: 
    - if: $OPERATION == "build-release"
  script:
    - docker login -u $CI_REGISTRY_USER -p $GL_CI_TOKEN $CI_REGISTRY
    - docker build -f distribution/Dockerfile -t $CI_REGISTRY/worldtech-ltd/worldcare-backend:$TAG .
    - docker push $CI_REGISTRY/worldtech-ltd/worldcare-backend:$TAG


